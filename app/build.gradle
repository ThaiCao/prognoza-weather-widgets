plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlinx-serialization'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "hr.dtakac.prognoza"
        minSdk 24
        targetSdk 33
        versionCode 2
        versionName "2.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    /**
     * To make this work, you need to:
     *  1. Place your keystore file (keystore.jks) in the root of the app module.
     *  2. Create a keystore.properties file in the root of the project. Its content should be:
     *     storeFile=./keystore.jks
     *     storePassword=my_store_password
     *     keyAlias=my_key_alias
     *     keyPassword=my_keystore_password
     */
    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(rootProject.file("./keystore.properties")))
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (System.getenv("GITHUB_WORKFLOW") == null) {
                /**
                 * Github Workflow handles signing the release with r0adkll's action, so we need to
                 * disable the signing config. When assembling the release locally, it needs to use
                 * the defined signing config that pulls the keystore and its credentials from
                 * local storage. For the workflow, see /.github/workflows/build_and_upload_to_github.yml
                 */
                signingConfig signingConfigs.release
            }
        }

        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        viewBinding true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "$versions.compose"
    }

    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    implementation project(":entities")
    implementation project(":domain")
    implementation project(":data")

    // Room
    implementation "androidx.room:room-ktx:$versions.room"

    // Network
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$versions.rft_ktx_serialization"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$versions.kotlinx_serialization"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    // Dependency injection
    implementation "com.google.dagger:hilt-android:$versions.dagger"
    implementation "androidx.hilt:hilt-navigation-compose:$versions.hilt_navigation_compose"
    kapt "com.google.dagger:hilt-compiler:$versions.dagger"

    // Android coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    // Work
    implementation "androidx.work:work-runtime-ktx:$versions.work"

    // Lifecycle and extensions
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
    implementation "androidx.activity:activity-ktx:$versions.activity_ktx"

    // Splash screen
    implementation "androidx.core:core-splashscreen:$versions.splash_screen"

    // Compose
    implementation "androidx.compose.ui:ui:$versions.compose"
    implementation "androidx.activity:activity-compose:$versions.compose_activity"
    implementation "androidx.compose.material3:material3:$versions.compose_material3"
    implementation "androidx.compose.animation:animation:$versions.compose"
    implementation "androidx.compose.ui:ui-tooling:$versions.compose"
    implementation "androidx.navigation:navigation-compose:$versions.compose_navigation"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$versions.lifecycle"
    implementation "io.coil-kt:coil-compose:$versions.coil"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$versions.accompanist"
    implementation "androidx.glance:glance-appwidget:$versions.glance_appwidget"

    // Core library desugaring
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.core_library_desugaring"

    // Logging
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // Testing
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$versions.compose"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$versions.compose"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidx_test_junit"
    androidTestImplementation "androidx.test:core:$versions.androidx_test"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidx_test_espresso"
    androidTestImplementation "androidx.test:runner:$versions.androidx_test"
    androidTestImplementation "androidx.test:rules:$versions.androidx_test"
    androidTestImplementation "junit:junit:$versions.junit"
}